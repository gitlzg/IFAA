binY[binX==1]=0+(yMat[binX==1]<=qnorm(percY1))
mean(binX)
mean(binY)
# for long format data
longX=c(t(binX))
longY=c(t(binY))
longrep=rep(seq(1,reps),each=samleSiz*clusize)
longId=rep(rep(seq(1,samleSiz),each=clusize),reps)
longData=data.frame(cbind(longrep,longId,longX,longY))
## run mixed model
pValueVec=rep(NA,reps)
lmeReg=function(h){
# cdat <- longData[longData$longrep==1,]
cdat <- longData[longData$longrep==h,]
# run gee
mf=formula(longY~longX)
geeResu=summary(geeglm(mf,data=cdat,id=longId,family=binomial(link="logit"),corstr="ar1"))
nRow=nrow(coef(geeResu))
nCol=ncol(coef(geeResu))
p=coef(geeResu)[nRow,nCol]
return(p)
}
pValueVec=unlist(lapply(seq(1:reps),lmeReg))
Power=mean(pValueVec<=alpha)
pValueVec
orTab=table(longData$longX,longData$longY)
mean(longData$longX)
mean(longData$longY)
or=(orTab[[4]]/orTab[[3]])/(orTab[[2]]/orTab[[1]])
or
rr=(orTab[[4]]/(orTab[[3]]+orTab[[4]]))/(orTab[[2]]/(orTab[[1]]+orTab[[2]]))
rr
Power
library(rockchalk)
library(geepack)
alpha=0.05
reps=300
samleSiz=40
clusize=56
rho_x=0
rho_y=0.8
rhoAsso=0.22
percX1=0.67
percY0=0.2
percY1=0.24
mu_X=rep(0,clusize)
R_X=matrix(NA,clusize,clusize)
for (i in 1:clusize){
for(j in 1:clusize){
R_X[i,j]=rho_x^{abs(i-j)}
}
}
mu_Y=rep(0,clusize)
R_Y=matrix(NA,clusize,clusize)
for (i in 1:clusize){
for(j in 1:clusize){
R_Y[i,j]=rho_y^{abs(i-j)}
}
}
xMat=mvrnorm(n=(samleSiz*reps),mu=mu_X,Sigma=R_X)
# beta=rhoAsso/(sqrt(1-rhoAsso^2))
# yMat=xMat*beta+mvrnorm(n=(samleSiz*reps),mu=mu_Y,Sigma=R_Y)
# yMat=yMat/(sqrt(1+beta^2))
yMat=mvrnorm(n=(samleSiz*reps),mu=mu_Y,Sigma=R_Y)
binX=0+(xMat<=qnorm(percX1))
binY=yMat
binY[binX==0]=0+(yMat[binX==0]<=qnorm(percY0))
binY[binX==1]=0+(yMat[binX==1]<=qnorm(percY1))
mean(binX)
mean(binY)
# for long format data
longX=c(t(binX))
longY=c(t(binY))
longrep=rep(seq(1,reps),each=samleSiz*clusize)
longId=rep(rep(seq(1,samleSiz),each=clusize),reps)
longData=data.frame(cbind(longrep,longId,longX,longY))
## run mixed model
pValueVec=rep(NA,reps)
lmeReg=function(h){
# cdat <- longData[longData$longrep==1,]
cdat <- longData[longData$longrep==h,]
# run gee
mf=formula(longY~longX)
geeResu=summary(geeglm(mf,data=cdat,id=longId,family=binomial(link="logit"),corstr="ar1"))
nRow=nrow(coef(geeResu))
nCol=ncol(coef(geeResu))
p=coef(geeResu)[nRow,nCol]
return(p)
}
pValueVec=unlist(lapply(seq(1:reps),lmeReg))
Power=mean(pValueVec<=alpha)
pValueVec
orTab=table(longData$longX,longData$longY)
mean(longData$longX)
mean(longData$longY)
or=(orTab[[4]]/orTab[[3]])/(orTab[[2]]/orTab[[1]])
or
rr=(orTab[[4]]/(orTab[[3]]+orTab[[4]]))/(orTab[[2]]/(orTab[[1]]+orTab[[2]]))
rr
Power
0.25/0.2
0.24/0.2
0.19/0.15
## examples of where objects will be found.
A <- 2
f <- function(x) print(x^2)
env <- new.env()
assign("A", 10, envir = env)
assign("f", f, envir = env)
f <- function(x) print(x)
f(A)                                      # 2
do.call("f", list(A))                     # 2
do.call("f", list(A), envir = env)        # 4
do.call(f, list(A), envir = env)          # 2
do.call("f", list(quote(A)), envir = env) # 100
do.call(f, list(quote(A)), envir = env)   # 10
do.call("f", list(as.name("A")), envir = env) # 100
list(A)
QUOTE(a)
quote(A)
list(quote(A))
"a"=="a"
x=seq(0.1,0.4,by=0.1)
x
pbinom(2,19,x)
x=seq(0.1,0.4,by=0.01)
pbinom(2,19,x)
x
x=seq(0.01,0.04,by=0.01)
pbinom(2,19,x)
x=seq(0.01,0.04,by=0.001)
pbinom(2,19,x)
x
# ratio among 4 cells
ratio=c(1,1,1,10^-5)
ratio
sampleSiz=100
x=rbinom(n=sampleSiz,size=1,prob=0.5)
sum(x)
strata=rbinom(n=sampleSiz,size=1,prob=0.5)
sum(strata)
sampleSiz=100
strata=rbinom(n=sampleSiz,size=1,prob=0.5)
sum(strata)
blockSize=2
strata
sample(seq(sampleSiz),(sampleSiz/2))
strata1=sample(seq(sampleSiz),(sampleSiz/2))
strata1=sample(seq(sampleSiz),(sampleSiz/2))
strata1ind=which(seq(sampleSiz) %in% strata1)
strata1ind
strata1
sample(c(0,1),2)
sample(c(0,1),2)
sample(c(0,1),2)
sample(c(0,1),2)
sample(c(0,1),2)
sample(c(0,1),2)
sample(c(0,1),2)
sample(c(0,1),2)
sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
blockSize=4
sum(strata)
sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
strata1ind
trt=rep(NA,sampleSiz)
blockAssign1=c()
for(i in 1:(length(strata1ind)/blockSize)){
blockGenrat=sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
blockAssign1=c(blockAssign,blockGenrat)
}
sampleSiz=200
trt=rep(NA,sampleSiz)
strata1=sample(seq(sampleSiz),(sampleSiz/2))
strata1ind=which(seq(sampleSiz) %in% strata1)
blockSize=4
sum(strata)
blockAssign1=c()
for(i in 1:(length(strata1ind)/blockSize)){
blockGenrat=sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
blockAssign1=c(blockAssign1,blockGenrat)
}
trt[strata1ind]=blockAssign1
blockAssign1
trt
strata2ind=which(!(seq(sampleSiz) %in% strata1))
blockAssign2=c()
for(i in 1:(length(strata1ind)/blockSize)){
blockGenrat=sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
blockAssign2=c(blockAssign2,blockGenrat)
}
trt[strata2ind]=blockAssign2
blockAssign2
trt
s=(seq(sampleSiz) %in% strata1)+0
s
s
trt
rnorm(n=sampleSiz)
sampleSiz=200
beta0=0.2
alpha=10
beta=3
trt=rep(NA,sampleSiz)
strata1=sample(seq(sampleSiz),(sampleSiz/2))
strata1ind=which(seq(sampleSiz) %in% strata1)
blockSize=4
sum(strata)
blockAssign1=c()
for(i in 1:(length(strata1ind)/blockSize)){
blockGenrat=sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
blockAssign1=c(blockAssign1,blockGenrat)
}
trt[strata1ind]=blockAssign1
strata2ind=which(!(seq(sampleSiz) %in% strata1))
blockAssign2=c()
for(i in 1:(length(strata1ind)/blockSize)){
blockGenrat=sample(c(rep(0,(blockSize/2)),rep(1,(blockSize/2))),blockSize)
blockAssign2=c(blockAssign2,blockGenrat)
}
trt[strata2ind]=blockAssign2
s=(seq(sampleSiz) %in% strata1)+0
y=beta0+alpha*s+beta*trt+rnorm(n=sampleSiz)
y
y[trt==1]
var(y[trt==1])
var(y[trt==0])
var(y[trt==1])
var(y[trt==0])
y[trt==1]-y[trt==0]
var(y[trt==1]-y[trt==0])
sqrt(1000)/1000
log(1000)/1000
3*log(1000)/1000
c(0.85,0.55,0.46,0.41,0.35,0.31,0.27,0.23,0.17,0.12,0.09,0.08)
aa=c(0.85,0.55,0.46,0.41,0.35,0.31,0.27,0.23,0.17,0.12,0.09,0.08)
mean(aa)
sd(aa)
sd(aa)/sqrt(12)
allStudies=c(0.85,0.55,0.46,0.41,0.35,0.31,0.27,0.23,0.17,0.12,0.09,0.08)
mean(allStudies)
sd(allStudies)/12
sd(allStudies)/sqrt(12)
1>3 & 8<9 & 2>4
1<3 & 8<9 & 2<4
set.seed(1)
x <- rnorm(n)
x <- cbind(x, x + 1)
print(Matrix::rankMatrix(x))
cor(x)
set.seed(1)
n=1000
x <- rnorm(n)
x <- cbind(x, x + 1)
print(Matrix::rankMatrix(x))
cor(x)
set.seed(1)
n <- 50
inputs <- matrix(rnorm(n*3), n, 3)
x <- cbind(
inputs[,1], inputs[,2], inputs[,1] + inputs[,2],
inputs[,3], -.25 * inputs[,3]
)
print(Matrix::rankMatrix(x))  # 5 columns but rank 3
x
dim(x)
cor(x)  # only detects the columns 4,5 collinearity, not 1,2,3
svd(x)$d  # two singular values are numerically zero as expected
qr.x <- qr(x)
print(qr.x$pivot)
rank.x <- Matrix::rankMatrix(x)
rank.x
print(Matrix::rankMatrix(x[,qr.x$pivot[1:rank.x]]))  # full rank
qr.x
set.seed(1)
n <- 50
inputs <- matrix(rnorm(n*3), n, 3)
x <- cbind(
inputs[,3],inputs[,1], inputs[,2], inputs[,1] + inputs[,2],
-.25 * inputs[,3]
)
dim(x)
print(Matrix::rankMatrix(x))  # 5 columns but rank 3
cor(x)  # only detects the columns 4,5 collinearity, not 1,2,3
svd(x)$d  # two singular values are numerically zero as expected
set.seed(1)
n <- 50
inputs <- matrix(rnorm(n*3), n, 3)
x <- cbind(
inputs[,3],-.25 * inputs[,3],inputs[,1], inputs[,2], inputs[,1] + inputs[,2]
)
dim(x)
print(Matrix::rankMatrix(x))  # 5 columns but rank 3
cor(x)  # only detects the columns 4,5 collinearity, not 1,2,3
svd(x)$d  # two singular values are numerically zero as expected
qr.x <- qr(x)
print(qr.x$pivot)
rank.x <- Matrix::rankMatrix(x)
print(Matrix::rankMatrix(x[,qr.x$pivot[1:rank.x]]))  # full rank
qr.R(qr.x)
diag(qr.R(qr.x))
cor(x)  # only detects the columns 4,5 collinearity, not 1,2,3
print(qr.x$pivot)
x <- cbind(
inputs[,3],-.25 * inputs[,3], inputs[,1] + inputs[,2],inputs[,1], inputs[,2]
)
dim(x)
print(Matrix::rankMatrix(x))  # 5 columns but rank 3
cor(x)  # only detects the columns 4,5 collinearity, not 1,2,3
svd(x)$d  # two singular values are numerically zero as expected
qr.x <- qr(x)
diag(qr.R(qr.x))
print(qr.x$pivot)
qr.R(qr.x)
n <- 50
inputs <- matrix(rnorm(n*3), n, 3)
x <- cbind(
inputs[,3],-.25 * inputs[,3], inputs[,1] + inputs[,2],inputs[,1], inputs[,2]
)
dim(x)
print(Matrix::rankMatrix(x))  # 5 columns but rank 3
cor(x)  # only detects the columns 4,5 collinearity, not 1,2,3
svd(x)$d  # two singu
qr.x <- qr(x)
qr.R(qr.x)
set.seed(1)
n <- 50
inputs <- matrix(rnorm(n*3), n, 3)
x <- cbind(
inputs[,3],-.25 * inputs[,3], inputs[,1] + inputs[,2],inputs[,1], inputs[,2]
)
dim(x)
print(Matrix::rankMatrix(x))  # 5 columns but rank 3
qr.x <- qr(x)
print(qr.x$pivot)
diag(qr.R(qr.x))
ns(3)
library(splines)
ns(3)
ns(x=3,knots=c(0.5,2,3.6,6.9,10))
ns(x=3,knots=c(2,3.6,6.9),Boundary.knots = c(0.5,10))
ns(x=3,knots=c(2,3.6,6.9),Boundary.knots = c(0.5,10),intercept=T)
ns(x=6,knots=c(2,3.6,6.9),Boundary.knots = c(0.5,10),intercept=T)
ns(x=30,knots=c(2,3.6,6.9),Boundary.knots = c(0.5,10),intercept=T)
ns(x=12,knots=c(12,13,14),Boundary.knots = c(11,15),intercept=T)
t=runif(1000,11,15)
t
aa=ns(x=t,knots=c(12,13,14),Boundary.knots = c(11,15),intercept=T)
aa
dim(aa)
aa[,1]
mean(b1)
b1=aa[,1]
mean(b1)
var(b1)
b2=aa[,2]
mean(b1)
b12
b1=aa[,1]
b2=aa[,2]
b12=b1*b2
b12
mean(b12)
t=runif(10000,11,15)
aa=ns(x=t,knots=c(12,13,14),Boundary.knots = c(11,15),intercept=T)
dim(aa)
b1=aa[,1]
b2=aa[,2]
b12=b1*b2
mean(b1)
var(b1)
mean(b12)
data.frame(cbind(c(1,2,3),c("a","b","c")))
dd=data.frame(cbind(c(1,2,3),c("a","b","c")))
dd
data.matrix(dd)
dd
class(dd$X2)
class(dd$X1)
x=matrix(seq(18),nrow=3)
x
lapply(x,sd)
x=rnorm(100)
x
y=0.1+0.8*x+rnorm(100)
y
xnew=cbind(x,matrix(0,nrow=100,ncol=50))
xnew[1:5,]
library(glmnet)
cv.glmnet(x=xnew,y=y)
aa=cv.glmnet(x=xnew,y=y)
aa$lambda
aa$glmnet.fit$beta
for (i in 1:100){
for{j in 1:i}{
xnew[i,j]=i*j
}
}
for(j in 1:i){
xnew[i,j]=i*j
}
for (i in 1:100){
for(j in 1:i){
xnew[i,j]=i*j
}
}
for (i in 1:100){
for(j in 1:min(i,50)){
xnew[i,j]=i*j
}
}
xnew[1:5,]
xnew[,1:10]
xnew[,1:50]
aa=cv.glmnet(x=xnew,y=y)
aa$glmnet.fit$beta[,1]
aa$glmnet.fit$beta[,2]
aa$glmnet.fit$beta[,3]
dim(aa$glmnet.fit$beta)
(aa$glmnet.fit$beta)[,51]
(aa$glmnet.fit$beta)[51,]
(aa$glmnet.fit$beta)[58,]
(aa$glmnet.fit$beta)[50,]
(aa$glmnet.fit$beta)[51,]
library(Matrix)
y=as(y,"sparseVector")
aa=cv.glmnet(x=xnew,y=y)
x=as(x,"sparseMatrix")
x=rnorm(100)
x
xnew=cbind(x,matrix(0,nrow=100,ncol=50))
xnew==as(xnew,"sparseMatrix")
xnew=cbind(x,matrix(0,nrow=100,ncol=50))
for (i in 1:100){
for(j in 1:min(i,50)){
xnew[i,j]=i*j
}
}
xnew[,1:50]
xnew==as(xnew,"sparseMatrix")
aa=cv.glmnet(x=xnew,y=y)
xnew
xnew=as(xnew,"sparseMatrix")
xnew
aa=cv.glmnet(x=xnew,y=y)
xnew=cbind(x,matrix(0,nrow=100,ncol=50))
for (i in 1:100){
for(j in 1:min(i,50)){
xnew[i,j]=i*j
}
}
xnew[,1:50]
xnew=as(xnew,"sparseMatrix")
aa=cv.glmnet(x=xnew,y=y)
y=0.1+0.8*x+rnorm(100)
aa=cv.glmnet(x=xnew,y=y)
aa=cv.glmnet(x=xnew,y=y,lambda=0)
aa=glmnet(x=xnew,y=y,lambda=0)
aa$beta
class(aa$beta)
as.vector(aa$beta)
aa$a0
median(aa$beta)
median(abs(aa$beta))
bb=glmnet(x=xnew,y=y,lambda=0.0017)
bb$beta
abs(aa$beta)
aa=glmnet(x=xnew,y=y,lambda=0)
abs(aa$beta)
median(abs(aa$beta[aa$beta!=0]))
aa=glmnet(x=xnew,y=y,lambda=0)
xnew=cbind(x,matrix(0,nrow=100,ncol=50))
xnew
cc=scale(xnew)
class(cc)
cc
dim(cc)
a=matrix(seq(25),nrow=5)
a
a[,-c(1,2)]=scale(a[,-c(1,2)])
a
quantile(seq(15),probs = 0.3)
quantile(seq(15),probs = 0.33)
class(quantile(seq(15),probs = 0.33))
quantile(seq(15),probs = 0.33)>4
quantile(seq(15),probs = 0.33)>9
seq_len(5)
remove.packages("IFAA")
library(IFAA)
unique(c("a","b","c","r","b"))
print(names(results$goodIndpRefTaxWithCount))
library(devtools)
pkg <- 'C:/Users/16037/Desktop/IFAA'
# create_package(pkg)
setwd(pkg)
# Run this after changing function's R file
devtools::document()
# This will make effect when change DESCRIPTION and R file
devtools::build_manual()
# This will make effect when change DESCRIPTION and R file
devtools::build_manual()
# Build vignettes is time-consuming
# When really need build it, turn it to TRUE
devtools::build(vignettes=F)
remove.packages("roxygen2")
install.packages("roxygen2")
remove.packages("cli")
install.packages("cli")
