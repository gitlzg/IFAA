y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
y[,1:6]
dim(y)
y1=y
dim(y1)
x1_a=x1
x2_a=x2
beta1=rep(NA,repN)
for(i in 1:repN){
a=(i-1)*sampleSize+1
b=i*sampleSize
# cat("i:",i,"\n")
# cat("a:",a,"\n")
# cat("b:",b,"\n")
y=y1[,a:b]
#print(y[,1:10])
Y12=y[1,]+y[2,]
logY12=log(Y12[Y12>0 & y[3,]>0])
Y3=y[3,(Y12>0 & y[3,]>0)]
logY3=log(Y3)
logY3_12=logY3-logY12
x1=x1_a[a:b]
x1_12=x1[Y12>0 & y[3,]>0]
x2=x2_a[a:b]
x2_12=x2[Y12>0 & y[3,]>0]
# resu.i=summary(lm(logY12~x1_12+x2_12))
resu.i=summary(lm(logY3_12~x1_12+x2_12))
beta1[i]=resu.i$coefficients[2,1]
}
bias=mean(beta1-betaEffect)
cat("estimate:",beta1,"\n")
cbind(TruValue=betaEffect,bias=bias,biasPcen=(100*bias/betaEffect))
#
## check additive property of lognormal distribution
#
library(rockchalk) # for mvrnorm()
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=20
betaEffect=1
betaMat=matrix(c(2,2,2,
0,0,betaEffect,
2,2,2),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
# zeroMecha=apply(y,c(1,2),function(x)x>zeroThresh)
# y=y*zeroMecha
# rowMeans(y==0)
# sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
y[,1:6]
dim(y)
y1=y
dim(y1)
x1_a=x1
x2_a=x2
beta1=rep(NA,repN)
for(i in 1:repN){
a=(i-1)*sampleSize+1
b=i*sampleSize
# cat("i:",i,"\n")
# cat("a:",a,"\n")
# cat("b:",b,"\n")
y=y1[,a:b]
#print(y[,1:10])
Y12=y[1,]+y[2,]
logY12=log(Y12[Y12>0 & y[3,]>0])
Y3=y[3,(Y12>0 & y[3,]>0)]
logY3=log(Y3)
logY3_12=logY3-logY12
x1=x1_a[a:b]
x1_12=x1[Y12>0 & y[3,]>0]
x2=x2_a[a:b]
x2_12=x2[Y12>0 & y[3,]>0]
# resu.i=summary(lm(logY12~x1_12+x2_12))
resu.i=summary(lm(logY3_12~x1_12+x2_12))
beta1[i]=resu.i$coefficients[2,1]
}
bias=mean(beta1-betaEffect)
cat("estimate:",beta1,"\n")
cbind(TruValue=betaEffect,bias=bias,biasPcen=(100*bias/betaEffect))
y[,1:6]
y[,1:60]
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=20
betaEffect=1
betaMat=matrix(c(2.2,2.2,2.2,
0,0,betaEffect,
2.2,2.2,2.2),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=20
betaEffect=1
betaMat=matrix(c(2,2,2,
0,0,betaEffect,
2,2,2),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
betaMat=matrix(c(2.5,2.5,2.5,
0,0,betaEffect,
2.5,2.5,2.5),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
zeroMecha=apply(y,c(1,2),function(x)x>zeroThresh)
y=y*zeroMecha
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=5
betaEffect=1
betaMat=matrix(c(2.5,2.5,2.5,
0,0,betaEffect,
2.5,2.5,2.5),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
zeroMecha=apply(y,c(1,2),function(x)x>zeroThresh)
y=y*zeroMecha
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=4
betaEffect=1
betaMat=matrix(c(2.5,2.5,2.5,
0,0,betaEffect,
2.5,2.5,2.5),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
zeroMecha=apply(y,c(1,2),function(x)x>zeroThresh)
y=y*zeroMecha
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=3
betaEffect=1
betaMat=matrix(c(2.5,2.5,2.5,
0,0,betaEffect,
2.5,2.5,2.5),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
zeroMecha=apply(y,c(1,2),function(x)x>zeroThresh)
y=y*zeroMecha
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=2
betaEffect=1
betaMat=matrix(c(2.5,2.5,2.5,
0,0,betaEffect,
2.5,2.5,2.5),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
zeroMecha=apply(y,c(1,2),function(x)x>zeroThresh)
y=y*zeroMecha
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
y[,1:60]
dim(y)
y1=y
dim(y1)
x1_a=x1
x2_a=x2
beta1=rep(NA,repN)
for(i in 1:repN){
a=(i-1)*sampleSize+1
b=i*sampleSize
# cat("i:",i,"\n")
# cat("a:",a,"\n")
# cat("b:",b,"\n")
y=y1[,a:b]
#print(y[,1:10])
Y12=y[1,]+y[2,]
logY12=log(Y12[Y12>0 & y[3,]>0])
Y3=y[3,(Y12>0 & y[3,]>0)]
logY3=log(Y3)
logY3_12=logY3-logY12
x1=x1_a[a:b]
x1_12=x1[Y12>0 & y[3,]>0]
x2=x2_a[a:b]
x2_12=x2[Y12>0 & y[3,]>0]
# resu.i=summary(lm(logY12~x1_12+x2_12))
resu.i=summary(lm(logY3_12~x1_12+x2_12))
beta1[i]=resu.i$coefficients[2,1]
}
bias=mean(beta1-betaEffect)
cat("estimate:",beta1,"\n")
cbind(TruValue=betaEffect,bias=bias,biasPcen=(100*bias/betaEffect))
zeroMecha_bin=rbinom(n=(3*n),size=1,prob=exp(-eta^2*y))
eta=1
zeroMecha_bin=rbinom(n=(3*n),size=1,prob=exp(-eta^2*y))
e^-3
10^-3
zeroMecha_bin=rbinom(n=(3*n),size=1,prob=exp(-eta^2*y))
zeroMecha_bin
zeroMecha_bin=matrix(rbinom(n=(3*n),size=1,prob=exp(-eta^2*c(y))),nrow=3)
zeroMecha_bin
zeroMecha_bin[,1:10]
zeroMecha_bin[,1:50]
zeroMecha_bin[,1:15]
eta=sqrt(-log(1/2))
eta
y[,1:60]
#
## check additive property of lognormal distribution
#
library(rockchalk) # for mvrnorm()
repN=200
sampleSize=5000
n=repN*sampleSize
c=runif(n,1/80,1/20)
zeroThresh=2
eta=sqrt(-log(1/2))
eta
betaEffect=1
betaMat=matrix(c(2.5,2.5,2.5,
0,0,betaEffect,
2.5,2.5,2.5),ncol=3)
x1=abs(rnorm(n))
x2=abs(rnorm(n))
bin=matrix(rbinom(n=(3*n),size=1,prob=0.9),nrow=3)
bin[,1:6]
y=exp(betaMat%*%t(cbind(rep(1,n),x1,x2))+
t(mvrnorm(n=n,mu=c(0,0,0),Sigma=diag(3))))
# y=y*bin
y=floor(y*bin*matrix(rep(c,each=3),nrow=3))
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
# fixed mechanism
zeroMecha=apply(y,c(1,2),function(x)x>zeroThresh)
# prob mechanism
zeroMecha_bin=matrix(rbinom(n=(3*n),size=1,prob=exp(-eta^2*c(y))),nrow=3)
zeroMecha_bin[,1:15]
y=y*zeroMecha
rowMeans(y==0)
sum(apply(y,c(1,2),function(x)x==0))/(nrow(y)*ncol(y))
y[,1:60]
dim(y)
y1=y
dim(y1)
x1_a=x1
x2_a=x2
beta1=rep(NA,repN)
for(i in 1:repN){
a=(i-1)*sampleSize+1
b=i*sampleSize
# cat("i:",i,"\n")
# cat("a:",a,"\n")
# cat("b:",b,"\n")
y=y1[,a:b]
#print(y[,1:10])
Y12=y[1,]+y[2,]
logY12=log(Y12[Y12>0 & y[3,]>0])
Y3=y[3,(Y12>0 & y[3,]>0)]
logY3=log(Y3)
logY3_12=logY3-logY12
x1=x1_a[a:b]
x1_12=x1[Y12>0 & y[3,]>0]
x2=x2_a[a:b]
x2_12=x2[Y12>0 & y[3,]>0]
# resu.i=summary(lm(logY12~x1_12+x2_12))
resu.i=summary(lm(logY3_12~x1_12+x2_12))
beta1[i]=resu.i$coefficients[2,1]
}
bias=mean(beta1-betaEffect)
cat("estimate:",beta1,"\n")
cbind(TruValue=betaEffect,bias=bias,biasPcen=(100*bias/betaEffect))
library(IFAA)
install.packages("C:\\Users\\lzg\\Downloads\\IFAA_0.0.0.9000.tar.gz",
repos = NULL,
type = "source")
library(IFAA)
browseVignettes("IFAA")
exp(0.548)
exp(0.568)
exp(5)
exp(2)
exp(3)
exp(2)
exp(1.5)
exp(2)
install.packages("C:\\Dropbox (UFL)\\papers\\IFAA\\Rpack\\IFAA_0.0.0.9000.tar.gz",
repos = NULL,
type = "source")
remove.packages("IFAA")
install.packages("C:\\Dropbox (UFL)\\papers\\IFAA\\Rpack\\IFAA_0.0.0.9000.tar.gz",
repos = NULL,
type = "source")
remove.packages("IFAA")
install.packages("C:\\Dropbox (UFL)\\papers\\IFAA\\Rpack\\IFAA_0.0.0.9000.tar.gz",
repos = NULL,
type = "source")
results$analysisResults$estByRefTaxaList$rawCount11$estByCovList
results$analysisResults$estByRefTaxaList$rawCount11$estByCovList
library(IFAA)
data(dataM)
data(dataC)
mz=MZILN(MicrobData=dataM,
CovData=dataC,linkIDname="id",
allCov=c("v1","v2","v3"),
refTaxa=c("rawCount11"),
bootB=500)
remove.packages("IFAA")
install.packages("C:\\Dropbox (UFL)\\papers\\IFAA\\Rpack\\IFAA_0.0.0.9000.tar.gz",
repos = NULL,
type = "source")
library(IFAA)
data(dataM)
data(dataC)
mz=MZILN(MicrobData=dataM,
CovData=dataC,linkIDname="id",
allCov=c("v1","v2","v3"),
refTaxa=c("rawCount11"),
bootB=500)
mz$analysisResults$estByRefTaxaList$rawCount11$estByCovList
remove.packages("IFAA")
remove.packages("IFAA")
library(IFAA)
devtools::install_github("gitlzg/IFAA")
library(IFAA)
data(dataM)
data(dataC)
mz=MZILN(MicrobData=dataM,
CovData=dataC,linkIDname="id",
allCov=c("v1","v2","v3"),
refTaxa=c("rawCount11"),
bootB=500)
remove.packages("IFAA")
remove.packages("IFAA")
devtools::install_github("gitlzg/IFAA")
library(IFAA)
data(dataM)
data(dataC)
mz=MZILN(MicrobData=dataM,
CovData=dataC,linkIDname="id",
allCov=c("v1","v2","v3"),
refTaxa=c("rawCount11"),
bootB=500)
library(IFAA)
devtools::install_github("gitlzg/IFAA")
library(IFAA)
data(dataM)
data(dataC)
mz=MZILN(MicrobData=dataM,
CovData=dataC,linkIDname="id",
allCov=c("v1","v2","v3"),
refTaxa=c("rawCount11"),
bootB=500)
browseVignettes("IFAA")
# source("utilsRpack_revision.R")
remove.packages("IFAA")
# source("utilsRpack_revision.R")
remove.packages("IFAA")
library(IFAA)
devtools::install_github("gitlzg/IFAA")
knit_with_parameters('C:/Dropbox (UFL)/papers/IFAA/Rpack/IFAA/vignettes/IFAAvig.Rmd')
remove.packages("IFAA")
library(IFAA)
install.packages("C:\\Dropbox (UFL)\\papers\\IFAA\\Rpack\\IFAA_1.0.0.tar.gz",
repos = NULL,
type = "source")
remove.packages("IFAA")
library(IFAA)
library(IFAA)
remove.packages("IFAA")
install.packages("C:\\Dropbox (UFL)\\papers\\IFAA\\Rpack\\IFAA_1.0.0.tar.gz",
repos = NULL,
type = "source")
setwd("C:/Dropbox (UFL)/papers/IFAA/Rpack/R")
library(IFAA)
#save(dataM,file="dataM.RData")
#save(dataC,file="dataC.RData")
mmm=get(load("dataM.RData"))
#class(mmm)
ccc=get(load("dataC.RData"))
results=IFAA(MicrobData=mmm,
CovData=ccc,
linkIDname="id",
testCov=c("v1","v2"),
ctrlCov=c("v3"),
nRef=4,
nPermu=4,
x1permut=F,
fwerRate=0.25,
bootB=5)
results=IFAA(MicrobData=mmm,
CovData=ccc,
linkIDname="id",
testCov=c("v1","v2"),
ctrlCov=c("v3"),
nRef=4,
nPermu=4,
x1permut=T,
fwerRate=0.25,
bootB=5)
results$analysisResults$estByCovList
data(dataM)
data(dataC)
mz=MZILN(MicrobData=dataM,
CovData=dataC,linkIDname="id",
allCov=c("v1","v2","v3"),
refTaxa=c("rawCount11"),
bootB=500)
mz$analysisResults$estByRefTaxaList$rawCount11$estByCovList
library(devtools)
pkg <- 'C:/Dropbox (UFL)/papers/IFAA/Rpack/IFAA'
# pkg <- 'C:/Users/lzg/Downloads/IFAA'
# create_package(pkg)
setwd(pkg)
# Run this after changing function's R file
devtools::document()
# This will make effect when change DESCRIPTION and R file
devtools::build_manual()
library(devtools)
pkg <- 'C:/Dropbox (UFL)/papers/IFAA/Rpack/IFAA'
# pkg <- 'C:/Users/lzg/Downloads/IFAA'
# create_package(pkg)
setwd(pkg)
# Run this after changing function's R file
devtools::document()
# This will make effect when change DESCRIPTION and R file
devtools::build_manual()
# Build vignettes is time-consuming
# When really need build it, turn it to TRUE
devtools::build(vignettes=T)
