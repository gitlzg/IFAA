500/3336
570/3336
679033*0.95
590/3620
4120*160
4120*155
609/47
609/470
1.04^4
45*1.04^4
45*1.04^5
45*1.1^5
45*1.1^4
5/3526
19/3526
50000/3526
19000/3526
5/3620
5/4120
3336*165
3786*160
3786*165
3539*165
630*0.06
630*0.94
580*0.97
629/3539
3539*175
7/47
1.04^4
1.03^4
405*1.04^4
405*1.05^4
405*1.06^4
405*1.06^5
3060*155
3060*165
2591*8
449-207
4490-207
400
2500
400*1.04^18
400*1.05^18
400*1.06^18
400*1.07^18
400*1.08^18
400*1.09^18
400*1.1^18
400*1.11^18
400*1.102^18
400*1.103^18
400*1.104^18
400*1.105^18
400*1.106^18
400*1.107^18
400*1.108^18
435/2591
44/2591
445/2591
2591*170
333400-210440
5/2591
173-19
43.5*0.03
2874*160
2874*155
4395*1.04^4
4395*1.03^4
4395*1.04^4
4395*1.05^4
2874*165
2874*160
4395*1.04^4
4395*1.05^4
2998*155
2998*160
50*0.95
500/2874
53/3336
3786*1.59
3786*165
435/2591
435/2591
43.5-4/2591
43.5-4
39.5/2591
40.5/2591
5/3060
0.16-0.0018
matrix(seq(1,15),nrow=1)
63.5-5
58.5/3644
57.5/3644
56.5/3644
matrix(seq(6),nrow=2)
Matrix:colSum(matrix(seq(6),nrow=2))
Matrix:colSums(matrix(seq(6),nrow=2))
rep(seq(3),each=2)
matrix(c(1,2),2,5)
matrix(c(1,2),5,2)
26668/4
26668/(4*180)
26668/(4*180000)
library(multicore)
install.packages("multicore")
install.packages("multicore",dependencies=TRUE, repos='http://cran.rstudio.com/')
30.03^2
8/28
qnorm(0.05)
qnorm(0.025)
184/594
library(cubature)
f=function(x){
a=exp(-x)
b=exp(-x)
c=exp(-x)
return(a,b,c)
}
f(1)
f=function(x){
a=exp(-x)
b=exp(-x)
c=exp(-x)
return(c(a,b,c))
}
f(1)
adaptIntegrate(f,1,2)
f(1)
adaptIntegrate(f,0,Inf)
integrate(f,0,Inf)
g=function(x){
a=exp(-x[1])
b=exp(-x[2])
c=exp(-x[3])
return(c(a,b,c))
}
g(c(1,1,1))
integrate(g,0,Inf)
integrate(g,c(0,0,0),c(Inf,Inf,Inf))
adaptIntegrate(f,0,Inf)
adaptIntegrate(f,c(0,0,0),c(Inf,Inf,Inf))
h=function(x){
a=exp(-x)
b=exp(-x)
c=exp(-x)
return(a+b+c)
}
h(1)
cubintegrate(h,0,Inf)
cubintegrate(h,0,Inf,method = c("hcubature")
)
cubintegrate(h,0,Inf,method = c("hcubature"))
dmvnorm <- function (x, mean, sigma, log = FALSE) {
if (is.vector(x)) {
x <- matrix(x, ncol = length(x))
}
if (missing(mean)) {
mean <- rep(0, length = ncol(x))
}
if (missing(sigma)) {
sigma <- diag(ncol(x))
}
if (NCOL(x) != NCOL(sigma)) {
stop("x and sigma have non-conforming size")
}
if (!isSymmetric(sigma, tol = sqrt(.Machine$double.eps),
check.attributes = FALSE)) {
stop("sigma must be a symmetric matrix")
}
if (length(mean) != NROW(sigma)) {
stop("mean and sigma have non-conforming size")
}
distval <- mahalanobis(x, center = mean, cov = sigma)
logdet <- sum(log(eigen(sigma, symmetric = TRUE, only.values = TRUE)$values))
logretval <- -(ncol(x) * log(2 * pi) + logdet + distval)/2
if (log)
return(logretval)
exp(logretval)
}
dmvnorm(1)
dmvnorm(c(1,2))
cubintegrate(h,0,Inf,method = c("hcubature"),vectorInterface = TRUE)
cubintegrate(h,0,Inf,method = c("hcubature"))#,vectorInterface = TRUE)
cubintegrate(h,0,Inf,method = c("hcubature"),vectorInterface = TRUE)
m <- 3
sigma <- diag(3)
sigma[2,1] <- sigma[1, 2] <- 3/5 ; sigma[3,1] <- sigma[1, 3] <- 1/3
sigma[3,2] <- sigma[2, 3] <- 11/15
logdet <- sum(log(eigen(sigma, symmetric = TRUE, only.values = TRUE)$values))
my_dmvnorm <- function (x, mean, sigma, logdet) {
x <- matrix(x, ncol = length(x))
distval <- stats::mahalanobis(x, center = mean, cov = sigma)
exp(-(3 * log(2 * pi) + logdet + distval)/2)
}
my_dmvnorm_v <- function (x, mean, sigma, logdet) {
distval <- stats::mahalanobis(t(x), center = mean, cov = sigma)
exp(matrix(-(3 * log(2 * pi) + logdet + distval)/2, ncol = ncol(x)))
}
my_dmvnorm_v(1)
my_dmvnorm_v(1,c(0,0,0),sigma,logdet)
m <- 3
sigma <- diag(3)
sigma[2,1] <- sigma[1, 2] <- 3/5 ; sigma[3,1] <- sigma[1, 3] <- 1/3
sigma[3,2] <- sigma[2, 3] <- 11/15
logdet <- sum(log(eigen(sigma, symmetric = TRUE, only.values = TRUE)$values))
my_dmvnorm <- function (x, mean, sigma, logdet) {
x <- matrix(x, ncol = length(x))
distval <- stats::mahalanobis(x, center = mean, cov = sigma)
exp(-(3 * log(2 * pi) + logdet + distval)/2)
}
my_dmvnorm(1)
sigma
mean
logdet
my_dmvnorm(1,c(0,0,0),sigma,logdet)
my_dmvnorm(c(1,2,3),c(0,0,0),sigma,logdet)
my_dmvnorm_v(c(1,2,3),c(0,0,0),sigma,logdet)
my_dmvnorm_v(1,c(0,0,0),sigma,logdet)
my_dmvnorm_v(matrix(seq(6),nrow=2),c(0,0,0),sigma,logdet)
my_dmvnorm_v(matrix(seq(6),nrow=3),c(0,0,0),sigma,logdet)
my_dmvnorm_v(matrix(seq(3),nrow=3),c(0,0,0),sigma,logdet)
my_dmvnorm(c(1,2,3),c(0,0,0),sigma,logdet)
my_dmvnorm_v(matrix(seq(3),nrow=3),c(0,0,0),sigma,logdet)
my_dmvnorm_v(matrix(seq(9),nrow=3),c(0,0,0),sigma,logdet)
my_dmvnorm_v(matrix(seq(30),nrow=3),c(0,0,0),sigma,logdet)
my_dmvnorm(matrix(seq(30),nrow=3),c(0,0,0),sigma,logdet)
my_dmvnorm(c(1,2,3),c(0,0,0),sigma,logdet)
logdet
my_dmvnorm_v <- function (x, mean, sigma, logdet) {
distval <- stats::mahalanobis(t(x), center = mean, cov = sigma)
print(distval)
exp(matrix(-(3 * log(2 * pi) + logdet + distval)/2, ncol = ncol(x)))
}
my_dmvnorm_v(matrix(seq(30),nrow=3),c(0,0,0),sigma,logdet)
testFn6 <- function(x) {
a <- (1 + sqrt(10.0)) / 9.0
prod( a / (a + 1) * ((a + 1) / (a + x))^2)
}
testFn6(x)
testFn6(1)
testFn6_v <- function(x) {
a <- (1 + sqrt(10.0)) / 9.0
r <- apply(x, 2, function(z) prod( a / (a + 1) * ((a + 1) / (a + z))^2))
matrix(r, ncol = ncol(x))
}
testFn6(c(1,2))
testFn6(c(1,2,3))
testFn6(t(c(1,2,3)))
t(c(1,2,3))
testFn6(as.matrix(c(1,2,3)))
as.matrix(c(1,2,3))
testFn6_v <- function(x) {
a <- (1 + sqrt(10.0)) / 9.0
r <- apply(x, 2, function(z) prod( a / (a + 1) * ((a + 1) / (a + z))^2))
print("r:")
print(r)
matrix(r, ncol = ncol(x))
}
testFn6(as.matrix(c(1,2,3)))
testFn6_v(as.matrix(c(1,2,3)))
testFn6_v(t(c(1,2,3)))
cubintegrate(testFn6_v,0,5,method = c("hcubature"),vectorInterface = TRUE)
hcubature(testFn6_v,0,5,method = c("hcubature"),vectorInterface = TRUE)
hcubature(testFn6_v,0,5,vectorInterface = TRUE)
testFn6_v(t(c(1,2,3)))
testFn6(c(1,2,3))
testFn6_v(matrix(seq(10),nrow=5))
h=function(x){
a=exp(-x)
b=exp(-x)
c=exp(-x)
return(a+b+c)
}
h(1)
hcubature(h,0,Inf)
f=function(x){
a=exp(-x)
b=exp(-x)
c=exp(-x)
return(c(a,b,c))
}
f(1)
hcubature(f,0,Inf,fDim=3,norm="INDIVIDUAL")
f=function(x){
a=exp(-x)
b=2*exp(-x)
c=3*exp(-x)
return(c(a,b,c))
}
f(1)
hcubature(f,0,Inf,fDim=3,norm="INDIVIDUAL")
hcubature(f,0,Inf,fDim=3,norm="L2")
hcubature
library(picasso)
picasso
picasso.gaussian
library(picasso)
picasso
remove.packages("IFAA")
library(IFAA)
devtools::install_github("gitlzg/IFAA")
remove.packages("digest")
remove.packages("IFAA")
library(IFAA)
devtools::install_github("gitlzg/IFAA")
library(IFAA)
library(IFAA)
data(dataM)
data(dataC)
results=IFAA(Microbdata=dataM,
CovData=dataC,
linkIDname="id",
testCov=c("v1","v2"),
ctrlCov=c("v3"),
nRef=3,
nPermu=3,
reguMethod="mcp",
fwerRate=0.2,
bootB=500)
library("glmnet")
library("mvtnorm")
library("HDCI")
library("Matrix")
library(doParallel) ## for bootstrap Lasso OLS
## generate the data
set.seed(2015)
n <- 200      # number of obs
p <- 500
s <- 10
beta <- rep(0, p)
beta[1:s] <- runif(s, 1/3, 1)
x <- rmvnorm(n = n, mean = rep(0, p), method = "svd")
signal <- sqrt(mean((x %*% beta)^2))
sigma <- as.numeric(signal / sqrt(10))  # SNR=10
y <- x %*% beta + rnorm(n)
x
y
c5<-makeCluster(3)
registerDoParallel(3)
set.seed(0)
obj <- bootLOPR(x = x, y = y, B = 3,parallel.boot = TRUE, ncores.boot = 2)
obj
obj$Beta.LPR
c5<-makeCluster(3)
registerDoParallel(3)
set.seed(0)
obj1 <- bootLOPR(x = x, y = y, B = 3,parallel.boot = TRUE, ncores.boot = 2)
obj1$Beta.LPR
sum(abs(obj1$Beta.LPR-obj$Beta.LPR))
obj2 <- bootLOPR(x = x, y = y, B = 3,parallel.boot = TRUE, ncores.boot = 2)
sum(abs(obj1$Beta.LPR-obj2$Beta.LPR))
obj$interval.LPR
class(obj$interval.LPR)
sum(abs(obj$interval.LPR-obj2$interval.LPR))
sum(abs(obj$interval.LPR-obj1$interval.LPR))
remove.packages("IFAA")
library(IFAA)
library(IFAA)
devtools::install_github("gitlzg/IFAA")
library(IFAA)
data(dataM)
data(dataC)
startT=proc.time()[3]
b=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
sum(abs(a$analysisResults$CILowMat-b$analysisResults$CILowMat))
a$analysisResults$CILowMat
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=40,
#refTaxa=c("rawCount67"),
nPermu=50,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
remove.packages("IFAA")
remove.packages("IFAA")
library(IFAA)
devtools::install_github("gitlzg/IFAA")
library(IFAA)
data(dataM)
data(dataC)
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=40,
#refTaxa=c("rawCount67"),
nPermu=50,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
availableCores()
library(IFAA)
data(dataM)
data(dataC)
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
remove.packages("IFAA")
library(IFAA)
remove.packages("IFAA")
library(IFAA)
devtools::install_github("gitlzg/IFAA")
library(IFAA)
data(dataM)
data(dataC)
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
remove.packages("IFAA")
library(IFAA)
pkgFolder <- 'C:/Dropbox (UFL)/papers/taxaSelect/Rpack'
install.packages(file.path(pkgFolder,"IFAA_0.0.0.9000.tar.gz"),repos=NULL,type="source") ## directly with vignettes
library(IFAA)
data(dataM)
data(dataC)
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
remove.packages("IFAA")
library(IFAA)
remove.packages("IFAA")
library(IFAA)
devtools::install_github("gitlzg/IFAA")
library(IFAA)
data(dataM)
data(dataC)
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
write.csv
library(IFAA)
data(dataM)
data(dataC)
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=40,
#refTaxa=c("rawCount67"),
nPermu=50,paraJobs=NULL,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
write.csv((endT-startT)/60,"totMinutes.csv")
library(IFAA)
data(dataM)
data(dataC)
dataM=as.matrix(dataM)
class(dataM)
colnames(dataM)
startT=proc.time()[3]
a=IFAA(Microbdata=dataM,CovData=dataC,linkIDname="id",
testCov=c("v1","v2"),ctrlCov=c("v3"),nRef=3,
#refTaxa=c("rawCount67"),
nPermu=3,paraJobs=2,
reguMethod="mcp",fwerRate=0.2,bootB=500)
endT=proc.time()[3]
cat((endT-startT)/60,"minutes","\n")
remove.packages("IFAA")
library(devtools)
pkg <- 'C:/Dropbox (UFL)/papers/taxaSelect/Rpack/IFAA'
# create_package(pkg)
setwd(pkg)
# devtools::use_package("glmnet")
document() ## default argument is pkg = ".", current working directory
dataM=read.csv("C:/Dropbox (UFL)/papers/taxaSelect/Rpack/R/Mdata1.csv",header=T)
dataC=read.csv("C:/Dropbox (UFL)/papers/taxaSelect/Rpack/R/covData1.csv",header=T)
dataM=dataM[1:20,1:60]
dataC=dataC[1:20,]
use_data(dataM,overwrite = TRUE)
use_data(dataC,overwrite = TRUE)
## build the package
build() ## default argument is pkg = ".", current working directory
remove.packages("IFAA")
